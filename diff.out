diff --git a/vsphere/resource_vsphere_virtual_machine.go b/vsphere/resource_vsphere_virtual_machine.go
index 5581489..52f6674 100644
--- a/vsphere/resource_vsphere_virtual_machine.go
+++ b/vsphere/resource_vsphere_virtual_machine.go
@@ -35,12 +35,6 @@ var DiskControllerTypes = []string{
 	"ide",
 }
 
-var DesiredPowerStates = []string{
-	"ignored",
-	string(types.VirtualMachinePowerStatePoweredOn),
-	string(types.VirtualMachinePowerStatePoweredOff),
-}
-
 type networkInterface struct {
 	deviceName       string
 	label            string
@@ -52,7 +46,6 @@ type networkInterface struct {
 	ipv6Gateway      string
 	adapterType      string // TODO: Make "adapter_type" argument
 	macAddress       string
-	directPathIO     bool
 }
 
 type hardDisk struct {
@@ -428,11 +421,6 @@ func resourceVSphereVirtualMachine() *schema.Resource {
 							Optional: true,
 							Computed: true,
 						},
-
-						"direct_path_io": &schema.Schema{
-							Type:     schema.TypeBool,
-							Optional: true,
-						},
 					},
 				},
 			},
@@ -556,26 +544,6 @@ func resourceVSphereVirtualMachine() *schema.Resource {
 					},
 				},
 			},
-
-			"power_state": &schema.Schema{
-				Type:     schema.TypeString,
-				Optional: true,
-				Default:  "ignored",
-				ValidateFunc: func(v interface{}, k string) (ws []string, errors []error) {
-					value := v.(string)
-					found := false
-					for _, t := range DesiredPowerStates {
-						if t == value {
-							found = true
-						}
-					}
-					if !found {
-						errors = append(errors, fmt.Errorf(
-							"Supported values for 'power_state' are %v", strings.Join(DesiredPowerStates, ", ")))
-					}
-					return
-				},
-			},
 		},
 	}
 }
@@ -709,14 +677,6 @@ func resourceVSphereVirtualMachineUpdate(d *schema.ResourceData, meta interface{
 		}
 	}
 
-	changePowerStateTo := ""
-	if d.HasChange("power_state") {
-		_, powerStateChange := d.GetChange("power_state")
-		changePowerStateTo = powerStateChange.(string)
-		log.Printf("[DEBUG] power state requires change to =>: %s", changePowerStateTo)
-		hasChanges = true
-	}
-
 	// do nothing if there are no changes
 	if !hasChanges {
 		return nil
@@ -724,8 +684,7 @@ func resourceVSphereVirtualMachineUpdate(d *schema.ResourceData, meta interface{
 
 	log.Printf("[DEBUG] virtual machine config spec: %v", configSpec)
 
-	if (rebootRequired && changePowerStateTo == "") || changePowerStateTo == string(types.VirtualMachinePowerStatePoweredOff) {
-
+	if rebootRequired {
 		log.Printf("[INFO] Shutting down virtual machine: %s", d.Id())
 
 		task, err := vm.PowerOff(context.TODO())
@@ -751,7 +710,7 @@ func resourceVSphereVirtualMachineUpdate(d *schema.ResourceData, meta interface{
 		log.Printf("[ERROR] %s", err)
 	}
 
-	if rebootRequired || changePowerStateTo == string(types.VirtualMachinePowerStatePoweredOn) {
+	if rebootRequired {
 		task, err = vm.PowerOn(context.TODO())
 		if err != nil {
 			return err
@@ -887,21 +846,6 @@ func resourceVSphereVirtualMachineCreate(d *schema.ResourceData, meta interface{
 			if v, ok := network["mac_address"].(string); ok && v != "" {
 				networks[i].macAddress = v
 			}
-
-			networks[i].directPathIO = false
-			if v, ok := network["direct_path_io"].(bool); ok {
-				networks[i].directPathIO = v
-			}
-			if v, ok := network["adapter_type"].(string); ok && v != "" {
-				switch v {
-				case "vmxnet3":
-				case "e1000":
-					networks[i].adapterType = v
-					break
-				default:
-					return fmt.Errorf("adaptor_type parameter '%#v' is invalid", v)
-				}
-			}
 		}
 		vm.networkInterfaces = networks
 		log.Printf("[DEBUG] network_interface init: %v", networks)
@@ -1071,18 +1015,6 @@ func resourceVSphereVirtualMachineRead(d *schema.ResourceData, meta interface{})
 		return err
 	}
 
-	if desiredPowerState, ok := d.GetOk("power_state"); ok {
-		if desiredPowerState.(string) == "ignored" &&
-			(state == types.VirtualMachinePowerStatePoweredOff || state == types.VirtualMachinePowerStateSuspended) {
-			return fmt.Errorf("vm is in a powered off or suspended state, and 'power_state' is 'ignored'; " +
-				"the vm must be powered on in order to read its current state")
-		}
-
-		if desiredPowerState.(string) != "ignored" && desiredPowerState.(string) != string(state) {
-			d.Set("power_state", string(state))
-		}
-	}
-
 	if state == types.VirtualMachinePowerStatePoweredOn {
 		// wait for interfaces to appear
 		log.Printf("[DEBUG] Waiting for interfaces to appear")
@@ -1101,6 +1033,7 @@ func resourceVSphereVirtualMachineRead(d *schema.ResourceData, meta interface{})
 		return err
 	}
 
+	//var vAppList []*object.VirtualApp
 	log.Printf("[DEBUG] Datacenter - %#v", dc)
 	log.Printf("[DEBUG] mvm.Summary.Config - %#v", mvm.Summary.Config)
 	log.Printf("[DEBUG] mvm.Summary.Config - %#v", mvm.Config)
@@ -1181,80 +1114,73 @@ func resourceVSphereVirtualMachineRead(d *schema.ResourceData, meta interface{})
 		return fmt.Errorf("Invalid disks to set: %#v", disks)
 	}
 
-	if state == types.VirtualMachinePowerStatePoweredOn {
-
-		networkInterfaces := make([]map[string]interface{}, 0)
-		for _, v := range mvm.Guest.Net {
-			if v.DeviceConfigId >= 0 {
-				log.Printf("[DEBUG] v.Network - %#v", v.Network)
-				networkInterface := make(map[string]interface{})
-				networkInterface["label"] = v.Network
-				networkInterface["mac_address"] = v.MacAddress
-				for _, ip := range v.IpConfig.IpAddress {
-					p := net.ParseIP(ip.IpAddress)
-					if p.To4() != nil {
-						log.Printf("[DEBUG] p.String - %#v", p.String())
-						log.Printf("[DEBUG] ip.PrefixLength - %#v", ip.PrefixLength)
-						networkInterface["ipv4_address"] = p.String()
-						networkInterface["ipv4_prefix_length"] = ip.PrefixLength
-					} else if p.To16() != nil {
-						log.Printf("[DEBUG] p.String - %#v", p.String())
-						log.Printf("[DEBUG] ip.PrefixLength - %#v", ip.PrefixLength)
-						networkInterface["ipv6_address"] = p.String()
-						networkInterface["ipv6_prefix_length"] = ip.PrefixLength
-					}
-					log.Printf("[DEBUG] networkInterface: %#v", networkInterface)
+	networkInterfaces := make([]map[string]interface{}, 0)
+	for _, v := range mvm.Guest.Net {
+		if v.DeviceConfigId >= 0 {
+			log.Printf("[DEBUG] v.Network - %#v", v.Network)
+			networkInterface := make(map[string]interface{})
+			networkInterface["label"] = v.Network
+			networkInterface["mac_address"] = v.MacAddress
+			for _, ip := range v.IpConfig.IpAddress {
+				p := net.ParseIP(ip.IpAddress)
+				if p.To4() != nil {
+					log.Printf("[DEBUG] p.String - %#v", p.String())
+					log.Printf("[DEBUG] ip.PrefixLength - %#v", ip.PrefixLength)
+					networkInterface["ipv4_address"] = p.String()
+					networkInterface["ipv4_prefix_length"] = ip.PrefixLength
+				} else if p.To16() != nil {
+					log.Printf("[DEBUG] p.String - %#v", p.String())
+					log.Printf("[DEBUG] ip.PrefixLength - %#v", ip.PrefixLength)
+					networkInterface["ipv6_address"] = p.String()
+					networkInterface["ipv6_prefix_length"] = ip.PrefixLength
 				}
 				log.Printf("[DEBUG] networkInterface: %#v", networkInterface)
-				networkInterfaces = append(networkInterfaces, networkInterface)
 			}
+			log.Printf("[DEBUG] networkInterface: %#v", networkInterface)
+			networkInterfaces = append(networkInterfaces, networkInterface)
 		}
-		if mvm.Guest.IpStack != nil {
-			for _, v := range mvm.Guest.IpStack {
-				if v.IpRouteConfig != nil && v.IpRouteConfig.IpRoute != nil {
-					for _, route := range v.IpRouteConfig.IpRoute {
-						if route.Gateway.Device != "" {
-							gatewaySetting := ""
-							if route.Network == "::" {
-								gatewaySetting = "ipv6_gateway"
-							} else if route.Network == "0.0.0.0" {
-								gatewaySetting = "ipv4_gateway"
+	}
+	if mvm.Guest.IpStack != nil {
+		for _, v := range mvm.Guest.IpStack {
+			if v.IpRouteConfig != nil && v.IpRouteConfig.IpRoute != nil {
+				for _, route := range v.IpRouteConfig.IpRoute {
+					if route.Gateway.Device != "" {
+						gatewaySetting := ""
+						if route.Network == "::" {
+							gatewaySetting = "ipv6_gateway"
+						} else if route.Network == "0.0.0.0" {
+							gatewaySetting = "ipv4_gateway"
+						}
+						if gatewaySetting != "" {
+							deviceID, err := strconv.Atoi(route.Gateway.Device)
+							if len(networkInterfaces) == 1 {
+								deviceID = 0
 							}
-							if gatewaySetting != "" {
-								deviceID, err := strconv.Atoi(route.Gateway.Device)
-								if len(networkInterfaces) == 1 {
-									deviceID = 0
-								}
-								if err != nil {
-									log.Printf("[WARN] error at processing %s of device id %#v: %#v", gatewaySetting, route.Gateway.Device, err)
-								} else {
-									log.Printf("[DEBUG] %s of device id %d: %s", gatewaySetting, deviceID, route.Gateway.IpAddress)
-									if len(route.Gateway.IpAddress) > 0 {
-										networkInterfaces[deviceID][gatewaySetting] = route.Gateway.IpAddress
-									} else {
-										log.Printf("[WARN] error at processing %s of device id %#v: missing IpAddress", gatewaySetting, route.Gateway.Device)
-									}
-								}
+							if err != nil {
+								log.Printf("[WARN] error at processing %s of device id %#v: %#v", gatewaySetting, route.Gateway.Device, err)
+							} else {
+								log.Printf("[DEBUG] %s of device id %d: %s", gatewaySetting, deviceID, route.Gateway.IpAddress)
+								networkInterfaces[deviceID][gatewaySetting] = route.Gateway.IpAddress
 							}
 						}
 					}
 				}
 			}
 		}
-		log.Printf("[DEBUG] networkInterfaces: %#v", networkInterfaces)
-		err = d.Set("network_interface", networkInterfaces)
-		if err != nil {
-			return fmt.Errorf("Invalid network interfaces to set: %#v", networkInterfaces)
-		}
+	}
+	log.Printf("[DEBUG] networkInterfaces: %#v", networkInterfaces)
+	err = d.Set("network_interface", networkInterfaces)
+	if err != nil {
+		return fmt.Errorf("Invalid network interfaces to set: %#v", networkInterfaces)
+	}
 
-		if len(networkInterfaces) > 0 {
-			if _, ok := networkInterfaces[0]["ipv4_address"]; ok {
-				log.Printf("[DEBUG] ip address: %v", networkInterfaces[0]["ipv4_address"].(string))
-				d.SetConnInfo(map[string]string{
-					"type": "ssh",
-					"host": networkInterfaces[0]["ipv4_address"].(string),
-				})
-			}
+	if len(networkInterfaces) > 0 {
+		if _, ok := networkInterfaces[0]["ipv4_address"]; ok {
+			log.Printf("[DEBUG] ip address: %v", networkInterfaces[0]["ipv4_address"].(string))
+			d.SetConnInfo(map[string]string{
+				"type": "ssh",
+				"host": networkInterfaces[0]["ipv4_address"].(string),
+			})
 		}
 	}
 
@@ -1631,7 +1557,7 @@ func addCdrom(client *govmomi.Client, vm *object.VirtualMachine, datacenter *obj
 }
 
 // buildNetworkDevice builds VirtualDeviceConfigSpec for Network Device.
-func buildNetworkDevice(f *find.Finder, label, adapterType string, macAddress string, uptCompatibilityEnabled bool) (*types.VirtualDeviceConfigSpec, error) {
+func buildNetworkDevice(f *find.Finder, label, adapterType string, macAddress string) (*types.VirtualDeviceConfigSpec, error) {
 	network, err := f.Network(context.TODO(), "*"+label)
 	if err != nil {
 		return nil, err
@@ -1659,9 +1585,8 @@ func buildNetworkDevice(f *find.Finder, label, adapterType string, macAddress st
 							Key:     -1,
 							Backing: backing,
 						},
-						AddressType:             address_type,
-						MacAddress:              macAddress,
-						UptCompatibilityEnabled: &uptCompatibilityEnabled,
+						AddressType: address_type,
+						MacAddress:  macAddress,
 					},
 				},
 			},
@@ -1675,9 +1600,8 @@ func buildNetworkDevice(f *find.Finder, label, adapterType string, macAddress st
 						Key:     -1,
 						Backing: backing,
 					},
-					AddressType:             address_type,
-					MacAddress:              macAddress,
-					UptCompatibilityEnabled: &uptCompatibilityEnabled,
+					AddressType: address_type,
+					MacAddress:  macAddress,
 				},
 			},
 		}, nil
@@ -2034,11 +1958,8 @@ func (vm *virtualMachine) setupVirtualMachine(c *govmomi.Client) error {
 			networkDeviceType = "e1000"
 		} else {
 			networkDeviceType = "vmxnet3"
-			if network.adapterType != "" {
-				networkDeviceType = network.adapterType
-			}
 		}
-		nd, err := buildNetworkDevice(finder, network.label, networkDeviceType, network.macAddress, network.directPathIO)
+		nd, err := buildNetworkDevice(finder, network.label, networkDeviceType, network.macAddress)
 		if err != nil {
 			return err
 		}
